;;; -*- mode: clojurec; -*-

(ns imgui-demo
  (:require [imgui]))

(cpp/raw "#include <imgui.h>")
(cpp/raw "#include <misc/cpp/imgui_stdlib.h>")

(def *state
  (atom {:counter     0
         :slider      0.0
         :eval-string ""
         :eval-result nil}))

(defn state-table
  []
  (cpp/ImGui.BeginTable "table" 2)
  (doseq [[k v] (into [["KEY" "VALUE"]] @*state)]
    (cpp/ImGui.TableNextRow)
    (cpp/ImGui.TableNextColumn)
    (cpp/ImGui.Text (str k))
    (cpp/ImGui.TableNextColumn)
    (cpp/ImGui.Text (str v)))
  (cpp/ImGui.EndTable))

(defn repl
  []
  (let [buffer-size 64
        buffer      (cpp/cast cpp/std.string (:eval-string @*state))]
    (cpp/.reserve buffer buffer-size)
    (cpp/ImGui.InputTextMultiline (cpp/.data (cpp/cast cpp/std.string "##eval")) (cpp/& buffer))
    (swap! *state assoc :eval-string buffer))

  (when (cpp/ImGui.Button "Eval")
    (->> (eval (read-string (:eval-string @*state)))
         (swap! *state assoc :eval-result))))

(defn app
  []
  ;; imgui window should fill the OS window
  (cpp/ImGui.SetNextWindowPos (cpp/ImVec2. 0.0 0.0))
  (cpp/ImGui.SetNextWindowSize (cpp/.-DisplaySize (cpp/ImGui.GetIO)))
  ;; begin window
  (cpp/ImGui.Begin "jank")

  ;; demo: pushing a button increments an atom
  (when (cpp/ImGui.Button "Increment")
    (swap! *state update :counter inc))

  (cpp/ImGui.SameLine)

  ;; demo: syncing an imgui slider with an atom
  (let [value (cpp/float (:slider @*state))]
    (cpp/ImGui.SliderFloat "##slider" (cpp/& value) 0.0 1.0)
    (swap! *state assoc :slider value))

  ;; demo: table showing state keys/values
  (state-table)

  ;; demo: repl
  (repl)

  (cpp/ImGui.End))

(defn -main
  []
  (let [window (imgui/create-window 400 300 "irtop")]
    (imgui/run-app! window #'app)))
